{%- liquid
  assign paginate_by = 50
  assign paginate_by_1 = 49
-%}


{%- paginate collection.products by paginate_by -%}

<div
  id="CollectionSection"
  data-section-id="{{ section.id }}"
  data-section-type="collection-template"
  data-collection-template="true">

  {%- if section.settings.description_position == 'top' -%}
    {%- if collection.description != blank -%}
      <div class="rte rte--collection-desc">
        <div class="enlarge-text">
          {{ collection.description }}
        </div>
      </div>
    {%- endif -%}
  {%- endif -%}

  {%- if paginate.current_page == 1 and section.settings.subcollection_style == 'above' -%}
    {%- render 'subcollections' -%}
  {%- endif -%}

  <div class="collection-filter">
    <div class="collection-filter__inner">
      {%- assign current_filter_size = current_tags | size -%}
      <div class="collection-filter__item collection-filter__item--drawer">
        <button
          type="button"
          class="collection-filter__btn text-link">
          <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-filter" viewBox="0 0 64 64"><path d="M48 42h10">.</path><path d="M48 42a5 5 0 1 1-5-5 5 5 0 0 1 5 5z"/><path d="M7 42h31">.</path><path d="M16 22H6">.</path><path d="M16 22a5 5 0 1 1 5 5 5 5 0 0 1-5-5z"/><path d="M57 22H26">.</path></svg>
          {{ 'collections.filters.title_tags' | t }}
          {%- if current_filter_size > 0 -%}
            ({{ current_filter_size }})
          {%- endif -%}
        </button>
      </div>

      <div class="collection-filter__item collection-filter__item--count small--hide">
        {{ 'collections.general.items_with_count' | t: count: collection.products_count }}
      </div>

      <div class="collection-filter__item collection-filter__item--right">
        {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
        <div class="collection-filter__sort small--hide">
          <label for="SortBy" class="hidden-label">{{ 'collections.sorting.title' | t }}</label>
          <select name="SortBy" id="SortBy" data-default-sortby="{{ collection.default_sort_by }}">
            <option value="title-ascending"{% if sort_by == collection.default_sort_by %} selected="selected"{% endif %}>{{ 'collections.sorting.title' | t }}</option>
            {%- for option in collection.sort_options -%}
              <option value="{{ option.value }}"{% if option.value == sort_by %} selected="selected"{% endif %}>{{ option.name }}</option>
            {%- endfor -%}
          </select>
        </div>

        {%- liquid
          assign productGridView = section.settings.grid_style
          if cart.attributes.product_view != blank
            assign productGridView = cart.attributes.product_view
          endif
        -%}

        <ul class="no-bullets inline-list text-right">
          <li><button type="button" class="grid-view-btn{% if productGridView == 'large' %} is-active{% endif %}" data-view="large" title="{{ 'collections.general.large' | t }}">
            <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-view-large" viewBox="0 0 35 35"><path d="M0 0h35v35H0z"/></svg>
            <span class="icon__fallback-text">{{ 'collections.general.large' | t }}</span>
          </button></li>
          <li><button type="button" class="grid-view-btn{% if productGridView == 'small' %} is-active{% endif %}" data-view="small" title="{{ 'collections.general.small' | t }}">
            <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-view-small" viewBox="0 0 35 35"><path d="M0 0h15v15H0zM20 0h15v15H20zM0 20h15v15H0zM20 20h15v15H20z"/></svg>
            <span class="icon__fallback-text">{{ 'collections.general.small' | t }}</span>
          </button></li>
          <li><button type="button" class="grid-view-btn{% if productGridView == 'list' %} is-active{% endif %}" data-view="list" title="{{ 'collections.general.list' | t }}">
            <svg aria-hidden="true" focusable="false" role="presentation" class="icon icon-view-list" viewBox="0 0 35 35"><g id="Layer_2" data-name="Layer 2"><path d="M0 0h35v8H0zM0 13h35v8H0zM0 27h35v8H0z"/></g></svg>
            <span class="icon__fallback-text">{{ 'collections.general.list' | t }}</span>
          </button></li>
        </ul>
      </div>
    </div>

    <div class="collection-mobile-filters medium-up--hide">
      <div class="collection-mobile-filters__holder" id="CollectionInlineFilterWrap"></div>
    </div>
  </div>

  {%- if collection.products == blank -%}
    <p>{{ 'collections.general.no_matches' | t }}</p>
  {%- endif -%}

  <div
    class="new-grid product-grid collection-grid"
    data-view="{{ productGridView }}"
    data-scroll-to>

    {% if sort_by == "price-ascending" %}
      {%- liquid
      assign lowest_available_price_string = ""
      for product in collection.products 
      	  if product.available
          	assign lowest_available_variant_price = product.price
          else 
          	assign lowest_available_variant_price = 99900
          endif
          if product.price_varies
          	  assign lowest_available_variant_price = 99900
              for variant in product.variants
                  if variant.price < lowest_available_variant_price and variant.available
                      assign lowest_available_variant_price = variant.price
                  endif
              endfor
          endif
          if product == collection.products[0]
              assign lowest_available_price_string = lowest_available_variant_price
          else 
              assign lowest_available_price_string = lowest_available_price_string | append: ',' | append: lowest_available_variant_price
          endif
      endfor 
      -%}
      {% for product in collection.products %}
        {% assign lowest_available_price_array = lowest_available_price_string | split: "," %}
        {% assign lowest_available_price_array_size = lowest_available_price_array.size | minus: 1 %}


        {% assign lowestPrice = 100000 %}
        {% assign priceIndex = 0 %}
        {% for i in (0..lowest_available_price_array_size) %}
            {% assign actPrice = lowest_available_price_array[i] | times: 1 %}
            {% if lowestPrice > actPrice %}
                {% assign lowestPrice = actPrice %}
                {% assign priceIndex = i %}
            {% endif %}
        {% endfor %} 

        {% if priceIndex == 0 %}
            {% capture lowestPrice_string %}{{lowestPrice}},{% endcapture %}
            {% capture lowest_available_price_string %} 
            {{ lowest_available_price_string | replace_first: lowestPrice_string, "100000," }}
            {% endcapture %}
        {% else %}
            {% if priceIndex == paginate_by_1 %}
                {% capture lowestPrice_string %},{{lowestPrice}}{% endcapture %}
                {% capture lowest_available_price_string %} 
                {{ lowest_available_price_string | replace_first: lowestPrice_string, ",100000" }}
                {% endcapture %}    
            {% else %}
                {% capture lowestPrice_string %},{{lowestPrice}},{% endcapture %}
                {% capture lowest_available_price_string %} 
                {{ lowest_available_price_string | replace_first: lowestPrice_string, ",100000," }}
                {% endcapture %}  
            {% endif %}
        {% endif %}

        {% render 'product-grid-item', product: collection.products[priceIndex] %}
        {% if settings.quick_shop_enable  %}
            {% render 'quick-shop-modal', product: collection.products[priceIndex] %}
        {% endif %}
      {% endfor %}
    {% else %}
    	{% if sort_by == "price-descending" %}
          {%- liquid
            assign highest_available_price_string = ""
            for product in collection.products 
                if product.available
                  assign highest_available_variant_price = product.price
                else 
                  assign highest_available_variant_price = 1
                endif
                if product.price_varies
                    assign highest_available_variant_price = 1
                    for variant in product.variants
                        if variant.price > highest_available_variant_price and variant.available
                            assign highest_available_variant_price = variant.price
                        endif
                    endfor
                endif
                if product == collection.products[0]
                    assign highest_available_price_string = highest_available_variant_price
                else 
                    assign highest_available_price_string = highest_available_price_string | append: ',' | append: highest_available_variant_price
                endif
            endfor 
            -%}
            {% for product in collection.products %}
              {% assign highest_available_price_array = highest_available_price_string | split: "," %}
              {% assign highest_available_price_array_size = highest_available_price_array.size | minus: 1 %}


              {% assign highestPrice = 0 %}
              {% assign priceIndex = 0 %}
              {% for i in (0..highest_available_price_array_size) %}
                  {% assign actPrice = highest_available_price_array[i] | times: 1 %}
                  {% if highestPrice < actPrice %}
                      {% assign highestPrice = actPrice %}
                      {% assign priceIndex = i %}
                  {% endif %}
              {% endfor %} 

              {% if priceIndex == 0 %}
                  {% capture highestPrice_string %}{{highestPrice}},{% endcapture %}
                  {% capture highest_available_price_string %} 
                  {{ highest_available_price_string | replace_first: highestPrice_string, "0," }}
                  {% endcapture %}
              {% else %}
                  {% if priceIndex == paginate_by_1 %}
                      {% capture highestPrice_string %},{{highestPrice}}{% endcapture %}
                      {% capture highest_available_price_string %} 
                      {{ highest_available_price_string | replace_first: highestPrice_string, ",0" }}
                      {% endcapture %}    
                  {% else %}
                      {% capture highestPrice_string %},{{highestPrice}},{% endcapture %}
                      {% capture highest_available_price_string %} 
                      {{ highest_available_price_string | replace_first: highestPrice_string, ",0," }}
                      {% endcapture %}  
                  {% endif %}
              {% endif %}

              {% render 'product-grid-item', product: collection.products[priceIndex] %}
              {% if settings.quick_shop_enable  %}
                  {% render 'quick-shop-modal', product: collection.products[priceIndex] %}
              {% endif %}
            {% endfor %}
    	{% else %}
          {%- liquid
          for product in collection.products 
              render 'product-grid-item', product: product

              if settings.quick_shop_enable 
                render 'quick-shop-modal', product: product
              endif
            endfor 
          -%}
    	{% endif %}
    {% endif %}
    
    
    {% comment %}
    {% assign unsortedProducts = collection.products %}
    {% assign unsortedProductsSize = unsortedProducts.size | minus: 1 %}
    {% for i in (0..unsortedProductsSize) reversed %}
      {% assign unsortedProductsSizeJ = unsortedProductsSize | minus: 1 %}
      {% for j in (0..unsortedProductsSizeJ) %}
        {% assign jPlus = j | plus: 1 %}
    
    	{% assign lowest_available_variant_price_j = unsortedProducts[j].price %}
        {%- if unsortedProducts[j].price_varies -%}
        	{% assign lowest_available_variant_price_j = unsortedProducts[j].first_available_variant.price %}
            {% for variant in unsortedProducts[j].variants %}
            	{%- if variant.price < lowest_available_variant_price_j and variant.available -%}
                  	{% assign lowest_available_variant_price_j = variant.price %}
                {%- endif -%}
            {% endfor %}
        {%- endif -%}
    
    
       	{% assign lowest_available_variant_price_jPlus = unsortedProducts[jPlus].price %}
        {%- if unsortedProducts[jPlus].price_varies -%}
        	{% assign lowest_available_variant_price_jPlus = unsortedProducts[jPlus].first_available_variant.price %}
            {% for variant in unsortedProducts[jPlus].variants %}
            	{%- if variant.price < lowest_available_variant_price_jPlus and variant.available -%}
                  	{% assign lowest_available_variant_price_jPlus = variant.price %}
                {%- endif -%}
            {% endfor %}
        {%- endif -%}
    
        {% if lowest_available_variant_price_j > lowest_available_variant_price_jPlus %}
    		<h4>True</h4>
          {% assign temp = unsortedProducts[j] %}
    	  {{ unsortedProducts[j].title }}
    	  {{ unsortedProducts[jPlus].title }}
		  {% assign unsortedProducts[j] = unsortedProducts[jPlus] %}
          {% assign unsortedProducts[jPlus] = temp %}
    	  {{ unsortedProducts[j].title }}
    	  {{ unsortedProducts[jPlus].title }}
        {% endif %}
      {% endfor %}
    {% endfor %}
    
    {%- liquid
    for product in unsortedProducts 
        render 'product-grid-item', product: product
    endfor 
    -%}
    {% endcomment %}
    
    
    
  </div>

  {%- liquid
    if paginate.current_page == 1 and section.settings.subcollection_style == 'below'
      render 'subcollections'
    endif
    if paginate.pages > 1
      render 'pagination', paginate: paginate
    endif
  -%}

  {%- if section.settings.description_position == 'bottom' -%}
    {%- if collection.description != blank -%}
      <hr class="hr--clear hr--small">
      <div class="rte">
        <div class="enlarge-text">
          {{ collection.description }}
        </div>
      </div>
      <hr class="hr--clear hr--small">
    {%- endif -%}
  {%- endif -%}
</div>

{%- endpaginate -%}

{% render 'collections.custom_fields' %}

{% schema %}
  {
    "name": "Collection pages",
    "settings": [
      {
        "type": "select",
        "id": "description_position",
        "label": "Collection description position",
        "default": "top",
        "options": [
          {
            "value": "top",
            "label": "Top"
          },
          {
            "value": "bottom",
            "label": "Bottom"
          }
        ]
      },
      {
        "type": "header",
        "content": "Subcollections"
      },
      {
        "type": "paragraph",
        "content": "Links to collections from your menu will appear here. [Learn more](https://archetypethemes.co/blogs/expanse/how-do-i-create-subcollections)"
      },
      {
        "type": "select",
        "id": "subcollection_style",
        "label": "Subcollection style",
        "default": "above",
        "options": [
          {
            "value": "above",
            "label": "Above products"
          },
          {
            "value": "below",
            "label": "Below products"
          },
          {
            "value": "none",
            "label": "None"
          }
        ]
      },
      {
        "type": "header",
        "content": "Products"
      },
      {
        "type": "select",
        "id": "grid_style",
        "label": "Default product layout",
        "default": "small",
        "options": [
          {
            "value": "large",
            "label": "Large grid"
          },
          {
            "value": "small",
            "label": "Small grid"
          },
          {
            "value": "list",
            "label": "List"
          }
        ]
      }
    ]
  }
{% endschema %}
